{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAUyC,IAAnCC,EAAOC,SAASC,cAAc,QA+BJ,SAAvBC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAGpBA,E,IAxCPL,EAAKa,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAMC,iBASN,IANiC,IAEVC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALX,MAAOe,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAIvBC,EAAQC,OAAOJ,EAAMK,OAChBC,EAAW,EAAGA,GAAYJ,EAAOG,MAAOC,IAC/CzB,EAAK0B,QACLvB,EAAcsB,EAAUH,GACrBK,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGjD4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAA/B,GAASgC,OAAOI,QACd,sBAAuCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGnDiB,GAASC,OAAOH,EAAKI,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/build/notiflix-notify-aio';\n\n// КРОКИ\n\n// 1.ВИТЯГНУТИ ЗНАЧЕННЯ ІНПУТІВ ДОСТУКУЄМОСЬ ДО ФОРМИ\n// 2. НА ФОРМУ СТВОРИТИ ОПЕРАТОРА З ПОДІЄЮ САБМІТ ЯКИЙ МАЄ ФУНКЦІЮ СТВОРИТИ ПРОМІСИ(СМС)\n// 3. У ФУНКЦІЇ SUBMIT ПРОПИСАТИ ЦИКЛ (НА КОЖНІЙ ІТЕРАЦІЇ -> СТВОРЮЄТЬСЯ НОВИЙ PROMISE)\n// 4. В TIMER - ЗАПИСУЄМО ЧАС ІЗ ЗАТРИМКОЮ СТВОРЕННЯ ПРОМІСІВ\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', hendleClickSubmit);\n// form.addEventListener('input', hendleInputDate);\nfunction hendleClickSubmit(event) {\n  event.preventDefault();\n\n  //  достукалась до значення інпутів форми\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  //   проходимо цикл додаємо на кожному проміс час кроку\n  let timer = Number(delay.value);\n  for (let position = 1; position <= amount.value; position++) {\n    form.reset();\n    createPromise(position, timer)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    timer += Number(step.value);\n  }\n}\n// функція створення промісів рандомно\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject({ position, delay });\n        // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","timer","Number","value","position1","reset","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.a3b0f619.js.map"}