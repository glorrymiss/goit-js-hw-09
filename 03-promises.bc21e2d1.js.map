{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,WAUyC,MAAnCC,EAAOC,SAASC,cAAc,QA+BJ,SAAvBC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAGpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAG5BA,EAAM,G,CAxCbL,EAAKa,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAMC,iBAG2B,MAC/BC,UAAYX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,IACvBL,EAAMM,cAGiC,IAAvCC,EAAQC,OAAOL,EAAMM,OACzB,IAAK,IAAIC,EAAW,EAAGA,GAAYL,EAAOI,MAAOC,IAC/CxB,EAAKyB,QACLtB,EAAcqB,EAAUH,GACrBK,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBsB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBzB,QAAiBC,MAAU,IAGnDyB,OAAM,EAAC1B,SAAEA,EAAQC,MAAEA,MAClBsB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoB3B,QAAiBC,MAAU,IAGrDgB,GAASC,OAAOJ,EAAKK,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/build/notiflix-notify-aio';\n\n// КРОКИ\n\n// 1.ВИТЯГНУТИ ЗНАЧЕННЯ ІНПУТІВ ДОСТУКУЄМОСЬ ДО ФОРМИ\n// 2. НА ФОРМУ СТВОРИТИ ОПЕРАТОРА З ПОДІЄЮ САБМІТ ЯКИЙ МАЄ ФУНКЦІЮ СТВОРИТИ ПРОМІСИ(СМС)\n// 3. У ФУНКЦІЇ SUBMIT ПРОПИСАТИ ЦИКЛ (НА КОЖНІЙ ІТЕРАЦІЇ -> СТВОРЮЄТЬСЯ НОВИЙ PROMISE)\n// 4. В TIMER - ЗАПИСУЄМО ЧАС ІЗ ЗАТРИМКОЮ СТВОРЕННЯ ПРОМІСІВ\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', hendleClickSubmit);\n// form.addEventListener('input', hendleInputDate);\nfunction hendleClickSubmit(event) {\n  event.preventDefault();\n\n  //  достукалась до значення інпутів форми\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  //   проходимо цикл додаємо на кожному проміс час кроку\n  let timer = Number(delay.value);\n  for (let position = 1; position <= amount.value; position++) {\n    form.reset();\n    createPromise(position, timer)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    timer += Number(step.value);\n  }\n}\n// функція створення промісів рандомно\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject({ position, delay });\n        // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","elements","delay1","step","amount","currentTarget","timer","Number","value","position1","reset","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.bc21e2d1.js.map"}