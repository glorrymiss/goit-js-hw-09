{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,WAUyC,IAAnCC,EAAOC,SAASC,cAAc,QAkCJ,SAAvBC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAGpBA,E,IA3CPL,EAAKa,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAMC,iBAWN,IANA,IAEuBC,EAAnBF,EAAMG,cADRC,SAAYC,EAAKH,EAALX,MAAOe,EAAMJ,EAANI,OAAQC,EAAIL,EAAJK,KAIzBC,GAASH,EAAMI,MACVC,EAAW,EAAGA,IAAaJ,EAAOG,MAAOC,IAChDrB,EAAcqB,EAAUF,GACrBG,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBsB,EAAA7B,GAAS8B,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBsB,EAAA7B,GAAS8B,OAAOI,QACd,sBAAuCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGnDiB,IAAUD,EAAKE,MAEjBvB,EAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/build/notiflix-notify-aio';\n\n// КРОКИ\n\n// 1.ВИТЯГНУТИ ЗНАЧЕННЯ ІНПУТІВ ДОСТУКУЄМОСЬ ДО ФОРМИ\n// 2. НА ФОРМУ СТВОРИТИ ОПЕРАТОРА З ПОДІЄЮ САБМІТ ЯКИЙ МАЄ ФУНКЦІЮ СТВОРИТИ ПРОМІСИ(СМС)\n// 3. У ФУНКЦІЇ SUBMIT ПРОПИСАТИ ЦИКЛ (НА КОЖНІЙ ІТЕРАЦІЇ -> СТВОРЮЄТЬСЯ НОВИЙ PROMISE)\n// 4. В TIMER - ЗАПИСУЄМО ЧАС ІЗ ЗАТРИМКОЮ СТВОРЕННЯ ПРОМІСІВ\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', hendleClickSubmit);\n// form.addEventListener('input', hendleInputDate);\nfunction hendleClickSubmit(event) {\n  event.preventDefault();\n\n  //  достукалась до значення інпутів форми\n  // const delay = event.currentTarget.elements.delay.value;\n  // console.log(delay);\n  const {\n    elements: { delay, amount, step },\n  } = event.currentTarget;\n\n  //   проходимо цикл додаємо на кожному проміс час кроку\n  let timer = +delay.value;\n  for (let position = 1; position <= +amount.value; position++) {\n    createPromise(position, timer)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    timer += +step.value;\n  }\n  form.reset();\n}\n\n// функція створення промісів рандомно\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        reject({ position, delay });\n        // Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","amount","step","timer","value","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.acdfc3f9.js.map"}