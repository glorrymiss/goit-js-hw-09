{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAoCgC,SAAvBC,EAAcC,EAAUC,GAC/BC,YAAW,WACaC,KAAKC,SAAW,GAIpCC,EAAAR,GAASS,OAAOC,QAAQ,uBAAwCC,OAAfR,EAAS,QAAYQ,OAANP,EAAM,OAItEI,EAAAR,GAASS,OAAOG,QAAQ,sBAAuCD,OAAfR,EAAS,QAAYQ,OAANP,EAAM,M,GAEtEA,E,YAtCQS,SAASC,cAAc,QAE/BC,iBAAiB,UAEtB,SAA2BC,GACzBA,EAAMC,iBAE2B,IAEVC,EAAnBF,EAAMG,cADRC,SAAYhB,EAAKc,EAALd,MAAOiB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAE3BC,QAAQC,IAAIpB,EAAMqB,OAGlB,IAD2C,IAAvCC,GAAStB,EAAMqB,MACVE,EAAI,EAAGA,GAAKL,EAAOG,MAAOE,IACvB,IAANA,GAKFD,IAAUL,EAAKI,MAEjBvB,EAAcyB,EAAGD,KANfA,GAAStB,EAAMqB,MACfvB,EAAcyB,EAAGD,IAOrBH,QAAQC,IAAIE,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport 'notiflix/build/notiflix-notify-aio';\n\n// КРОКИ\n\n// 1.ВИТЯГНУТИ ЗНАЧЕННЯ ІНПУТІВ ДОСТУКУЄМОСЬ ДО ФОРМИ\n// 2. НА ФОРМУ СТВОРИТИ ОПЕРАТОРА З ПОДІЄЮ САБМІТ ЯКИЙ МАЄ ФУНКЦІЮ СТВОРИТИ ПРОМІСИ(СМС)\n// 3.В  ПРОМІСІ ПРОПИСАТИ AMOUNT - К-СТЬ ПРОМІСІВ ЯКІ МАЮТЬ СТВОРИТИСЬ\n// 4. В ДЕЛАЙ - ЗАПИСУЄМО ЧАС ІЗ ЗАТРИМКОЮ СТВОРЕННЯ ПРОМІСІВ\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', hendleClickSubmit);\n// form.addEventListener('input', hendleInputDate);\nfunction hendleClickSubmit(event) {\n  event.preventDefault();\n  //  достукалась до значення інпутів форми\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n  console.log(delay.value);\n  //   проходимо цикл додаємо на кожному проміс час кроку\n  let timer = +delay.value;\n  for (let i = 1; i <= amount.value; i++) {\n    if (i === 1) {\n      timer = +delay.value;\n      createPromise(i, timer);\n      continue;\n    } else {\n      timer += +step.value;\n    }\n    createPromise(i, timer);\n  }\n  console.log(timer);\n}\n// функція створення промісів рандомно\nfunction createPromise(position, delay) {\n  setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      // Fulfill\n\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      // Reject\n\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  }, delay);\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(resalt);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.failure(error);\n//   });\n\n// const promise = new Promise((resolve, reject) => {\n//   const shouldResolve = Math.random() > 0.3;\n//   // setTimeOut(() => {\n//   if (shouldResolve) {\n//     // Fulfill\n//     resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   }\n//   // Reject\n//   reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//   // }, delay);\n// });\n// return promise;\n// }\n\n// createPromise(amount, firstDelay);\n\n//   .then(({ position, delay }) => {\n//     Notiflix.Notify.success(result);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notiflix.Notify.warning(error);\n//   });\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","setTimeout","Math","random","$parcel$interopDefault","Notify","success","concat","failure","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","step","amount","console","log","value","timer","i"],"version":3,"file":"03-promises.c962e54b.js.map"}